<?xml version='1.0' encoding='utf-8' ?>

<!-- build 10400.17.0915.2112                               -->
<workbook original-version='10.3' source-build='10.4.0 (10400.17.0915.2112)' source-platform='win' version='10.4' xmlns:user='http://www.tableausoftware.com/xml/user'>
  <preferences>
    <preference name='ui.encoding.shelf.height' value='24' />
    <preference name='ui.shelf.height' value='26' />
  </preferences>
  <datasources>
    <datasource hasconnection='false' inline='true' name='Parameters' version='10.4'>
      <aliases enabled='yes' />
      <column caption='Max % of outliers' datatype='real' name='[Parameter 1]' param-domain-type='any' role='measure' type='quantitative' value='0.10000000000000001'>
        <calculation class='tableau' formula='0.10000000000000001' />
      </column>
      <column alias='Positive' caption='Direction' datatype='string' name='[Parameter 2]' param-domain-type='list' role='measure' type='nominal' value='&quot;pos&quot;'>
        <calculation class='tableau' formula='&quot;pos&quot;' />
        <aliases>
          <alias key='&quot;both&quot;' value='Both' />
          <alias key='&quot;neg&quot;' value='Negative' />
          <alias key='&quot;pos&quot;' value='Positive' />
        </aliases>
        <members>
          <member alias='Positive' value='&quot;pos&quot;' />
          <member alias='Negative' value='&quot;neg&quot;' />
          <member alias='Both' value='&quot;both&quot;' />
        </members>
      </column>
    </datasource>
    <datasource caption='sample-superstore' inline='true' name='federated.0bboeqz0cl8xr5107nbpa11mae2n' version='10.4'>
      <connection class='federated'>
        <named-connections>
          <named-connection caption='sample-superstore' name='textscan.0yotfs70iedybn1a4c3uk0r2drx2'>
            <connection class='textscan' directory='../data' filename='sample-superstore.csv' password='' server='' />
          </named-connection>
        </named-connections>
        <relation connection='textscan.0yotfs70iedybn1a4c3uk0r2drx2' name='sample-superstore.csv' table='[sample-superstore#csv]' type='table'>
          <columns character-set='UTF-8' header='yes' locale='en_US' separator=','>
            <column datatype='string' name='Category' ordinal='0' />
            <column datatype='integer' name='Number of Records' ordinal='1' />
            <column datatype='integer' name='Quantity' ordinal='2' />
            <column datatype='real' name='Sales' ordinal='3' />
            <column datatype='string' name='Segment' ordinal='4' />
            <column datatype='string' name='Ship Mode' ordinal='5' />
          </columns>
        </relation>
        <metadata-records>
          <metadata-record class='column'>
            <remote-name>Category</remote-name>
            <remote-type>129</remote-type>
            <local-name>[Category]</local-name>
            <parent-name>[sample-superstore.csv]</parent-name>
            <remote-alias>Category</remote-alias>
            <ordinal>0</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RUS' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteCollation'>&quot;en_US&quot;</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;heap&quot;</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4294967292</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;str&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Number of Records</remote-name>
            <remote-type>20</remote-type>
            <local-name>[Number of Records]</local-name>
            <parent-name>[sample-superstore.csv]</parent-name>
            <remote-alias>Number of Records</remote-alias>
            <ordinal>1</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;sint64&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Quantity</remote-name>
            <remote-type>20</remote-type>
            <local-name>[Quantity]</local-name>
            <parent-name>[sample-superstore.csv]</parent-name>
            <remote-alias>Quantity</remote-alias>
            <ordinal>2</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;sint64&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Sales</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Sales]</local-name>
            <parent-name>[sample-superstore.csv]</parent-name>
            <remote-alias>Sales</remote-alias>
            <ordinal>3</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;double&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Segment</remote-name>
            <remote-type>129</remote-type>
            <local-name>[Segment]</local-name>
            <parent-name>[sample-superstore.csv]</parent-name>
            <remote-alias>Segment</remote-alias>
            <ordinal>4</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RUS' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteCollation'>&quot;en_US&quot;</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;heap&quot;</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4294967292</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;str&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Ship Mode</remote-name>
            <remote-type>129</remote-type>
            <local-name>[Ship Mode]</local-name>
            <parent-name>[sample-superstore.csv]</parent-name>
            <remote-alias>Ship Mode</remote-alias>
            <ordinal>5</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RUS' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteCollation'>&quot;en_US&quot;</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;heap&quot;</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4294967292</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;str&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='capability'>
            <remote-name />
            <remote-type>0</remote-type>
            <parent-name>[sample-superstore.csv]</parent-name>
            <remote-alias />
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='character-set'>&quot;UTF-8&quot;</attribute>
              <attribute datatype='string' name='collation'>&quot;en_US&quot;</attribute>
              <attribute datatype='string' name='field-delimiter'>&quot;,&quot;</attribute>
              <attribute datatype='string' name='header-row'>&quot;true&quot;</attribute>
              <attribute datatype='string' name='locale'>&quot;en_US&quot;</attribute>
              <attribute datatype='string' name='single-char'>&quot;&quot;</attribute>
            </attributes>
          </metadata-record>
        </metadata-records>
      </connection>
      <aliases enabled='yes' />
      <column caption='Print Statement' datatype='real' name='[Calculation_979814398363512832]' role='measure' type='ordinal'>
        <calculation class='tableau' formula='SCRIPT_REAL(&#13;&#10;&quot;&#13;&#10;print(&apos;length of argument is&apos;)&#13;&#10;print(length(.arg1))&#13;&#10;print(&apos;values of Segment are&apos;)&#13;&#10;print(.arg1)&#13;&#10;&#13;&#10;return(length(.arg1))&#13;&#10;&quot;,&#13;&#10;MAX([Segment]),&#13;&#10;MAX([Category]),&#13;&#10;MAX([Ship Mode]))'>
          <table-calc ordering-type='Rows' />
        </calculation>
      </column>
      <column datatype='integer' name='[Number of Records]' role='measure' type='quantitative' user:auto-column='numrec' />
      <layout dim-ordering='alphabetic' dim-percentage='0.342222' measure-ordering='alphabetic' measure-percentage='0.364444' parameter-percentage='0.293333' show-structure='true' />
      <semantic-values>
        <semantic-value key='[Country].[Name]' value='&quot;United States&quot;' />
      </semantic-values>
    </datasource>
    <datasource caption='tweets' inline='true' name='federated.1qks2n11yybbpa1bf7h5h0zn16m7' version='10.4'>
      <connection class='federated'>
        <named-connections>
          <named-connection caption='tweets' name='textscan.1ejtf350zthpgh10z1coy1yp3bmq'>
            <connection class='textscan' directory='../data' filename='tweets.csv' password='' server='' />
          </named-connection>
        </named-connections>
        <relation connection='textscan.1ejtf350zthpgh10z1coy1yp3bmq' name='tweets.csv' table='[tweets#csv]' type='table'>
          <columns character-set='UTF-8' header='yes' locale='en_US' separator=','>
            <column datatype='datetime' name='Timestamp' ordinal='0' />
            <column datatype='integer' name='Tweets' ordinal='1' />
          </columns>
        </relation>
        <metadata-records>
          <metadata-record class='column'>
            <remote-name>Timestamp</remote-name>
            <remote-type>135</remote-type>
            <local-name>[Timestamp]</local-name>
            <parent-name>[tweets.csv]</parent-name>
            <remote-alias>Timestamp</remote-alias>
            <ordinal>0</ordinal>
            <local-type>datetime</local-type>
            <aggregation>Year</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;datetime&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Tweets</remote-name>
            <remote-type>20</remote-type>
            <local-name>[Tweets]</local-name>
            <parent-name>[tweets.csv]</parent-name>
            <remote-alias>Tweets</remote-alias>
            <ordinal>1</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;sint64&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='capability'>
            <remote-name />
            <remote-type>0</remote-type>
            <parent-name>[tweets.csv]</parent-name>
            <remote-alias />
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='character-set'>&quot;UTF-8&quot;</attribute>
              <attribute datatype='string' name='collation'>&quot;en_US&quot;</attribute>
              <attribute datatype='string' name='field-delimiter'>&quot;,&quot;</attribute>
              <attribute datatype='string' name='header-row'>&quot;true&quot;</attribute>
              <attribute datatype='string' name='locale'>&quot;en_US&quot;</attribute>
              <attribute datatype='string' name='single-char'>&quot;&quot;</attribute>
            </attributes>
          </metadata-record>
        </metadata-records>
      </connection>
      <aliases enabled='yes' />
      <column caption='Outlier' datatype='boolean' name='[Calculation_1068760517621190656]' role='measure' type='nominal'>
        <calculation class='tableau' formula='SCRIPT_BOOL(&#13;&#10;&quot;&#13;&#10;tryCatch({&#13;&#10;&#9;library(AnomalyDetection)&#13;&#10;&#13;&#10;&#9;timestamp = .arg1&#13;&#10;&#9;tweets = .arg2&#13;&#10;&#13;&#10;&#9;timestamp = as.POSIXct(strptime(timestamp, &apos;%Y-%m-%dT%H:%M:%SZ&apos;), tz = &apos;GMT&apos;)&#13;&#10;&#9;cleanTweets = data.frame(timestamp, tweets)&#13;&#10;&#13;&#10;&#9;tweetOutliers = AnomalyDetectionTs(cleanTweets, max_anoms = .arg3[1], direction = .arg4[1])&#13;&#10;&#9;outlierTimestamps = tweetOutliers$anoms$timestamp&#13;&#10;&#9;outlierTimestamps = as.POSIXct(outlierTimestamps, tz = &apos;GMT&apos;)&#13;&#10;&#13;&#10;&#9;isOutlier = timestamp %in% outlierTimestamps&#13;&#10;}, error = function(e) {&#13;&#10;&#9;FALSE&#13;&#10;})&#13;&#10;&quot;,&#13;&#10;MAX([Timestamp]),&#13;&#10;SUM([Tweets]),&#13;&#10;[Parameters].[Parameter 1], &#13;&#10;[Parameters].[Parameter 2])'>
          <table-calc ordering-type='Rows' />
        </calculation>
      </column>
      <column caption='Simple Calc' datatype='real' name='[Calculation_12384930027892736]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='SCRIPT_REAL(&quot;return(5)&quot;, SUM([Number of Records]))'>
          <table-calc ordering-type='Rows' />
        </calculation>
      </column>
      <column caption='length(.arg1)' datatype='integer' name='[Calculation_1523624079632891908]' role='measure' type='ordinal'>
        <calculation class='tableau' formula='SCRIPT_INT(&quot;&#13;&#10;length(.arg1)&#13;&#10;&quot;, &#13;&#10;[Parameters].[Parameter 1])'>
          <table-calc ordering-type='Rows' />
        </calculation>
      </column>
      <column datatype='integer' name='[Number of Records]' role='measure' type='quantitative' user:auto-column='numrec'>
        <calculation class='tableau' formula='1' />
      </column>
      <column caption='length(.arg1[1])' datatype='integer' name='[paste(.arg1) (copy)]' role='measure' type='ordinal'>
        <calculation class='tableau' formula='SCRIPT_INT(&quot;&#13;&#10;length(.arg1[1])&#13;&#10;&quot;, &#13;&#10;[Parameters].[Parameter 1])'>
          <table-calc ordering-type='Rows' />
        </calculation>
      </column>
      <layout dim-ordering='alphabetic' dim-percentage='0.37931' measure-ordering='alphabetic' measure-percentage='0.401379' parameter-percentage='0.21931' show-structure='true' user-set-layout='true' />
      <semantic-values>
        <semantic-value key='[Country].[Name]' value='&quot;United States&quot;' />
      </semantic-values>
      <datasource-dependencies datasource='Parameters'>
        <column caption='Max % of outliers' datatype='real' name='[Parameter 1]' param-domain-type='any' role='measure' type='quantitative' value='0.10000000000000001'>
          <calculation class='tableau' formula='0.10000000000000001' />
        </column>
        <column alias='Positive' caption='Direction' datatype='string' name='[Parameter 2]' param-domain-type='list' role='measure' type='nominal' value='&quot;pos&quot;'>
          <calculation class='tableau' formula='&quot;pos&quot;' />
          <aliases>
            <alias key='&quot;both&quot;' value='Both' />
            <alias key='&quot;neg&quot;' value='Negative' />
            <alias key='&quot;pos&quot;' value='Positive' />
          </aliases>
        </column>
      </datasource-dependencies>
    </datasource>
  </datasources>
  <worksheets>
    <worksheet name='Simple Calc'>
      <table>
        <view>
          <datasources />
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
          </pane>
        </panes>
        <rows />
        <cols />
      </table>
    </worksheet>
    <worksheet name='Table Calc'>
      <table>
        <view>
          <datasources>
            <datasource caption='sample-superstore' name='federated.0bboeqz0cl8xr5107nbpa11mae2n' />
          </datasources>
          <datasource-dependencies datasource='federated.0bboeqz0cl8xr5107nbpa11mae2n'>
            <column datatype='string' name='[Category]' role='dimension' type='nominal' />
            <column datatype='string' name='[Segment]' role='dimension' type='nominal' />
            <column datatype='string' name='[Ship Mode]' role='dimension' type='nominal' />
            <column-instance column='[Category]' derivation='None' name='[none:Category:nk]' pivot='key' type='nominal' />
            <column-instance column='[Segment]' derivation='None' name='[none:Segment:nk]' pivot='key' type='nominal' />
            <column-instance column='[Ship Mode]' derivation='None' name='[none:Ship Mode:nk]' pivot='key' type='nominal' />
          </datasource-dependencies>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-cull' value='true' />
                <format attr='mark-labels-show' value='false' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>([federated.0bboeqz0cl8xr5107nbpa11mae2n].[none:Segment:nk] / [federated.0bboeqz0cl8xr5107nbpa11mae2n].[none:Category:nk])</rows>
        <cols>[federated.0bboeqz0cl8xr5107nbpa11mae2n].[none:Ship Mode:nk]</cols>
      </table>
    </worksheet>
    <worksheet name='Test Paste'>
      <table>
        <view>
          <datasources />
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
          </pane>
        </panes>
        <rows />
        <cols />
      </table>
    </worksheet>
    <worksheet name='Tweets'>
      <table>
        <view>
          <datasources>
            <datasource caption='tweets' name='federated.1qks2n11yybbpa1bf7h5h0zn16m7' />
            <datasource name='Parameters' />
          </datasources>
          <datasource-dependencies datasource='Parameters'>
            <column caption='Max % of outliers' datatype='real' name='[Parameter 1]' param-domain-type='any' role='measure' type='quantitative' value='0.10000000000000001'>
              <calculation class='tableau' formula='0.10000000000000001' />
            </column>
            <column alias='Positive' caption='Direction' datatype='string' name='[Parameter 2]' param-domain-type='list' role='measure' type='nominal' value='&quot;pos&quot;'>
              <calculation class='tableau' formula='&quot;pos&quot;' />
              <aliases>
                <alias key='&quot;both&quot;' value='Both' />
                <alias key='&quot;neg&quot;' value='Negative' />
                <alias key='&quot;pos&quot;' value='Positive' />
              </aliases>
            </column>
          </datasource-dependencies>
          <datasource-dependencies datasource='federated.1qks2n11yybbpa1bf7h5h0zn16m7'>
            <column caption='Outlier' datatype='boolean' name='[Calculation_1068760517621190656]' role='measure' type='nominal'>
              <calculation class='tableau' formula='SCRIPT_BOOL(&#13;&#10;&quot;&#13;&#10;tryCatch({&#13;&#10;&#9;library(AnomalyDetection)&#13;&#10;&#13;&#10;&#9;timestamp = .arg1&#13;&#10;&#9;tweets = .arg2&#13;&#10;&#13;&#10;&#9;timestamp = as.POSIXct(strptime(timestamp, &apos;%Y-%m-%dT%H:%M:%SZ&apos;), tz = &apos;GMT&apos;)&#13;&#10;&#9;cleanTweets = data.frame(timestamp, tweets)&#13;&#10;&#13;&#10;&#9;tweetOutliers = AnomalyDetectionTs(cleanTweets, max_anoms = .arg3[1], direction = .arg4[1])&#13;&#10;&#9;outlierTimestamps = tweetOutliers$anoms$timestamp&#13;&#10;&#9;outlierTimestamps = as.POSIXct(outlierTimestamps, tz = &apos;GMT&apos;)&#13;&#10;&#13;&#10;&#9;isOutlier = timestamp %in% outlierTimestamps&#13;&#10;}, error = function(e) {&#13;&#10;&#9;FALSE&#13;&#10;})&#13;&#10;&quot;,&#13;&#10;MAX([Timestamp]),&#13;&#10;SUM([Tweets]),&#13;&#10;[Parameters].[Parameter 1], &#13;&#10;[Parameters].[Parameter 2])'>
                <table-calc ordering-type='Rows' />
              </calculation>
            </column>
            <column datatype='datetime' name='[Timestamp]' role='dimension' type='ordinal' />
            <column datatype='integer' name='[Tweets]' role='measure' type='quantitative' />
            <column-instance column='[Tweets]' derivation='Sum' name='[sum:Tweets:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Timestamp]' derivation='Hour-Trunc' name='[thr:Timestamp:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Calculation_1068760517621190656]' derivation='User' name='[usr:Calculation_1068760517621190656:nk]' pivot='key' type='nominal'>
              <table-calc ordering-type='Rows' />
            </column-instance>
          </datasource-dependencies>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <encoding attr='space' class='1' field='[federated.1qks2n11yybbpa1bf7h5h0zn16m7].[sum:Tweets:qk]' field-type='quantitative' fold='true' scope='rows' synchronized='true' type='space' />
            <format attr='display' class='1' field='[federated.1qks2n11yybbpa1bf7h5h0zn16m7].[sum:Tweets:qk]' scope='rows' value='false' />
          </style-rule>
          <style-rule element='label'>
            <format attr='text-format' field='[federated.1qks2n11yybbpa1bf7h5h0zn16m7].[thr:Timestamp:qk]' value='*yyyy-mm-dd hh:nn:ss' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
          </pane>
          <pane id='1' selection-relaxation-option='selection-relaxation-allow' y-axis-name='[federated.1qks2n11yybbpa1bf7h5h0zn16m7].[sum:Tweets:qk]'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <mark-sizing mark-sizing-setting='marks-scaling-off' />
            <style>
              <style-rule element='mark'>
                <format attr='size' value='0.0099999997764825821' />
              </style-rule>
            </style>
          </pane>
          <pane id='2' selection-relaxation-option='selection-relaxation-allow' y-axis-name='[federated.1qks2n11yybbpa1bf7h5h0zn16m7].[sum:Tweets:qk]' y-index='1'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Circle' />
            <mark-sizing mark-sizing-setting='marks-scaling-off' />
            <encodings>
              <color column='[federated.1qks2n11yybbpa1bf7h5h0zn16m7].[usr:Calculation_1068760517621190656:nk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='size' value='0.86756908893585205' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>([federated.1qks2n11yybbpa1bf7h5h0zn16m7].[sum:Tweets:qk] + [federated.1qks2n11yybbpa1bf7h5h0zn16m7].[sum:Tweets:qk])</rows>
        <cols>[federated.1qks2n11yybbpa1bf7h5h0zn16m7].[thr:Timestamp:qk]</cols>
      </table>
    </worksheet>
    <worksheet name='Tweets per Week'>
      <table>
        <view>
          <datasources>
            <datasource caption='tweets' name='federated.1qks2n11yybbpa1bf7h5h0zn16m7' />
          </datasources>
          <datasource-dependencies datasource='federated.1qks2n11yybbpa1bf7h5h0zn16m7'>
            <column datatype='datetime' name='[Timestamp]' role='dimension' type='ordinal' />
            <column datatype='integer' name='[Tweets]' role='measure' type='quantitative' />
            <column-instance column='[Tweets]' derivation='Sum' name='[sum:Tweets:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Timestamp]' derivation='Hour-Trunc' name='[thr:Timestamp:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Timestamp]' derivation='Week' name='[wk:Timestamp:ok]' pivot='key' type='ordinal' />
          </datasource-dependencies>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <encoding attr='space' class='1' field='[federated.1qks2n11yybbpa1bf7h5h0zn16m7].[sum:Tweets:qk]' field-type='quantitative' fold='true' scope='rows' synchronized='true' type='space' />
            <format attr='display' class='1' field='[federated.1qks2n11yybbpa1bf7h5h0zn16m7].[sum:Tweets:qk]' scope='rows' value='false' />
          </style-rule>
        </style>
        <panes>
          <pane id='2' selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-cull' value='true' />
                <format attr='mark-labels-show' value='false' />
              </style-rule>
            </style>
          </pane>
          <pane id='3' selection-relaxation-option='selection-relaxation-allow' y-axis-name='[federated.1qks2n11yybbpa1bf7h5h0zn16m7].[sum:Tweets:qk]'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <mark-sizing mark-sizing-setting='marks-scaling-off' />
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-cull' value='true' />
                <format attr='mark-labels-show' value='false' />
                <format attr='size' value='0.0099999997764825821' />
              </style-rule>
            </style>
          </pane>
          <pane id='4' selection-relaxation-option='selection-relaxation-allow' y-axis-name='[federated.1qks2n11yybbpa1bf7h5h0zn16m7].[sum:Tweets:qk]' y-index='1'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Circle' />
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-cull' value='true' />
                <format attr='mark-labels-show' value='false' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>([federated.1qks2n11yybbpa1bf7h5h0zn16m7].[sum:Tweets:qk] + [federated.1qks2n11yybbpa1bf7h5h0zn16m7].[sum:Tweets:qk])</rows>
        <cols>([federated.1qks2n11yybbpa1bf7h5h0zn16m7].[wk:Timestamp:ok] * [federated.1qks2n11yybbpa1bf7h5h0zn16m7].[thr:Timestamp:qk])</cols>
      </table>
    </worksheet>
  </worksheets>
  <windows source-height='51'>
    <window class='worksheet' maximized='true' name='Simple Calc'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='2147483647'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <default-map-tool-selection tool='2' />
      </viewpoint>
    </window>
    <window class='worksheet' name='Tweets'>
      <cards>
        <edge name='left'>
          <strip size='128'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='25'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card mode='type_in' param='[Parameters].[Parameter 1]' type='parameter' />
            <card mode='compact' param='[Parameters].[Parameter 2]' type='parameter' />
            <card pane-specification-id='2' param='[federated.1qks2n11yybbpa1bf7h5h0zn16m7].[usr:Calculation_1068760517621190656:nk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.1qks2n11yybbpa1bf7h5h0zn16m7].[none:Timestamp:qk]</field>
            <field>[federated.1qks2n11yybbpa1bf7h5h0zn16m7].[thr:Timestamp:qk]</field>
            <field>[federated.1qks2n11yybbpa1bf7h5h0zn16m7].[usr:Calculation_1068760517621190656:nk]</field>
            <field>[federated.1qks2n11yybbpa1bf7h5h0zn16m7].[usr:Calculation_1523624079556427776:nk]</field>
          </color-one-way>
        </highlight>
        <default-map-tool-selection tool='2' />
      </viewpoint>
    </window>
    <window class='worksheet' name='Tweets per Week'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='2147483647'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <zoom type='fit-height' />
        <highlight>
          <color-one-way>
            <field>[federated.1qks2n11yybbpa1bf7h5h0zn16m7].[none:Timestamp:ok]</field>
            <field>[federated.1qks2n11yybbpa1bf7h5h0zn16m7].[tdy:Timestamp:qk]</field>
            <field>[federated.1qks2n11yybbpa1bf7h5h0zn16m7].[thr:Timestamp:qk]</field>
            <field>[federated.1qks2n11yybbpa1bf7h5h0zn16m7].[usr:Calculation_1523624079556427776:nk]</field>
            <field>[federated.1qks2n11yybbpa1bf7h5h0zn16m7].[usr:Calculation_1523624079632891908:ok]</field>
            <field>[federated.1qks2n11yybbpa1bf7h5h0zn16m7].[yr:Timestamp:ok]</field>
          </color-one-way>
        </highlight>
        <floating-toolbar-visibility value='2' />
        <default-map-tool-selection tool='16' />
      </viewpoint>
    </window>
    <window class='worksheet' name='Test Paste'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.1qks2n11yybbpa1bf7h5h0zn16m7].[usr:Calculation_1523624079632891908:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
    </window>
    <window class='worksheet' name='Table Calc'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.0bboeqz0cl8xr5107nbpa11mae2n].[none:Category:nk]</field>
            <field>[federated.0bboeqz0cl8xr5107nbpa11mae2n].[none:Segment:nk]</field>
            <field>[federated.0bboeqz0cl8xr5107nbpa11mae2n].[none:Ship Mode:nk]</field>
            <field>[federated.0bboeqz0cl8xr5107nbpa11mae2n].[usr:Calculation_979814398363512832:ok]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
    </window>
  </windows>
  <thumbnails>
    <thumbnail height='192' name='Simple Calc' width='192'>
      iVBORw0KGgoAAAANSUhEUgAAAMAAAADACAYAAABS3GwHAAAACXBIWXMAAA7DAAAOwwHHb6hk
      AAACFUlEQVR4nO3TMQEAIAzAMMC/5yFjRxMFfXpnZg5Eve0A2GQA0gxAmgFIMwBpBiDNAKQZ
      gDQDkGYA0gxAmgFIMwBpBiDNAKQZgDQDkGYA0gxAmgFIMwBpBiDNAKQZgDQDkGYA0gxAmgFI
      MwBpBiDNAKQZgDQDkGYA0gxAmgFIMwBpBiDNAKQZgDQDkGYA0gxAmgFIMwBpBiDNAKQZgDQD
      kGYA0gxAmgFIMwBpBiDNAKQZgDQDkGYA0gxAmgFIMwBpBiDNAKQZgDQDkGYA0gxAmgFIMwBp
      BiDNAKQZgDQDkGYA0gxAmgFIMwBpBiDNAKQZgDQDkGYA0gxAmgFIMwBpBiDNAKQZgDQDkGYA
      0gxAmgFIMwBpBiDNAKQZgDQDkGYA0gxAmgFIMwBpBiDNAKQZgDQDkGYA0gxAmgFIMwBpBiDN
      AKQZgDQDkGYA0gxAmgFIMwBpBiDNAKQZgDQDkGYA0gxAmgFIMwBpBiDNAKQZgDQDkGYA0gxA
      mgFIMwBpBiDNAKQZgDQDkGYA0gxAmgFIMwBpBiDNAKQZgDQDkGYA0gxAmgFIMwBpBiDNAKQZ
      gDQDkGYA0gxAmgFIMwBpBiDNAKQZgDQDkGYA0gxAmgFIMwBpBiDNAKQZgDQDkGYA0gxAmgFI
      MwBpBiDNAKQZgDQDkGYA0gxAmgFIMwBpBiDNAKQZgDQDkGYA0gxAmgFIMwBpBiDNAKR9Y+0F
      fBUOM1sAAAAASUVORK5CYII=
    </thumbnail>
    <thumbnail height='192' name='Table Calc' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='Test Paste' width='192'>
      iVBORw0KGgoAAAANSUhEUgAAAMAAAADACAYAAABS3GwHAAAACXBIWXMAAA7DAAAOwwHHb6hk
      AAACF0lEQVR4nO3TMQEAIAzAMIZ/z0MGRxMFfTq7uweCZmbu7wj4yQCkGYA0A5BmANIMQJoB
      SDMAaQYgzQCkGYA0A5BmANIMQJoBSDMAaQYgzQCkGYA0A5BmANIMQJoBSDMAaQYgzQCkGYA0
      A5BmANIMQJoBSDMAaQYgzQCkGYA0A5BmANIMQJoBSDMAaQYgzQCkGYA0A5BmANIMQJoBSDMA
      aQYgzQCkGYA0A5BmANIMQJoBSDMAaQYgzQCkGYA0A5BmANIMQJoBSDMAaQYgzQCkGYA0A5Bm
      ANIMQJoBSDMAaQYgzQCkGYA0A5BmANIMQJoBSDMAaQYgzQCkGYA0A5BmANIMQJoBSDMAaQYg
      zQCkGYA0A5BmANIMQJoBSDMAaQYgzQCkGYA0A5BmANIMQJoBSDMAaQYgzQCkGYA0A5BmANIM
      QJoBSDMAaQYgzQCkGYA0A5BmANIMQJoBSDMAaQYgzQCkGYA0A5BmANIMQJoBSDMAaQYgzQCk
      GYA0A5BmANIMQJoBSDMAaQYgzQCkGYA0A5BmANIMQJoBSDMAaQYgzQCkGYA0A5BmANIMQJoB
      SDMAaQYgzQCkGYA0A5BmANIMQJoBSDMAaQYgzQCkGYA0A5BmANIMQJoBSDMAaQYgzQCkGYA0
      A5BmANIMQJoBSDMAaQYgzQCkGYA0A5BmANIMQJoBSDMAaQYgzQCkGYA0A5BmANIMQJoBSHtb
      egWA0FAUAAAAAABJRU5ErkJggg==
    </thumbnail>
    <thumbnail height='192' name='Tweets' width='192'>
      iVBORw0KGgoAAAANSUhEUgAAAMAAAADACAYAAABS3GwHAAAACXBIWXMAAA7DAAAOwwHHb6hk
      AAAS4ElEQVR4nO3daWwc533H8e8z1+7yJpekRFISdUuUZFGXJVlRLDtK6iROUxsujAZw0QM9
      khQoUBQpECBHWzSvigAtUARFD6ROivqNg7RICrdxAze+o1uyLIqWRFMHD/HmLsndndmZpy+o
      w3ZlieLOanc5/w8ggGvQz/NoNL+dZ5555nmU1lojRAQppZRR6kYIUUoSABFp1gc/zM7Okk6n
      S9UWIR44VYp7gLGxMRoaGrAs696/LESRyD2AiDwJgIi0UAIwOtDHy28eI9Ca9MQgr79+lMmM
      y9zcOMPDswy+38PoTC6MqoQIVSid8JaOtazJKBRQ29TO5tUBBhod5Bkf7Mesq2dTdQyt9Yf+
      BEEQRvVCLFpx70IDn9GR6yxvbAK4ddJrrfF9v6hVC7EQoQTg+pUeenr6SKU9OlfEOXP2HGZt
      C9u2r2LDQ3vIz17jeqqR5fVxDMPAMAwsy5JRIFFyoQyD5jIzZF0fpSzicZNMJgcYVNdWobTC
      UAF5bWCb87ccMgwqyoFSSoVyBsYSNcQStz87Tvwjv2Fgh1GRECGTYVARaRIAEWkSABFpEgAR
      aRIAEWkSABFpEgARafIkahG01uiZ6wQTfRh1HaiGlcjM8sokAVgEnR4i+/K38IfOYNSvJP7E
      X2G2dpW6WWIR5GtrEfzRXvzB0+DNEYxfxL96tNRNEoskAVgEo64dVd2MBlSsBiO5ttRNEosk
      7wQvgg58/KEzDBz5Me3dh7E6D6BMme1UaUKbDBc1yjCxOnYy3qlZuXoHypALaaWSfzkRaRIA
      EWkSABFpEgARaRIAEWkSABFpEgARaRIAEWkSABFpEgARaRIAEWkSABFpEgARaaEEwMukOXP+
      wvyqz7lZjr/1On1Dk7juLKmUS3ZqhMk5N4yqhAhVKAGYnctg3Cjq+rU+OrbsZnqon5w3R2py
      mosDk1THZL68KD+hvA/QkGxlbHIWAJ23qatL4DsJ5vI5Tr59jK5Dh3BMhe/7BEGA7/t4nlfx
      G2T4vo/ruhjyPkDFCv2FGGV5pKYzjOQyrLeS7Nx/gMmRYXLN9cQsE9Oc/2PbdsW+EXaTaZo4
      jiMBqGChnIFX3ztGX/8EA0Mp9u5bz7kTx0mueYiYbVHfZNOaNJicy7GsLnHvwoR4gEIJwMqN
      e1i58fbn3fsP3vrZcQCaWRZGRUKETK7dItIkACLSJAAi0iQAItIqexxSREowO4Z/+Q2I1WKt
      3IdyqgsuUwIgKoL2MuRe/S75C/8NpkNs/1ewdz6HMsyCypUukKgIOjOFP3QKfBfcGfLXjkKQ
      L7hcCYCoCCrRgLliD5gxtFOLtWo/GIV3YKQLJCqCshPEDv4J/vLdpLMBtVs/W3D3ByQAooIY
      VU2w9tNkR0ZQTlU4ZYZSihAVSgIgIk0CICJNAiAiTQIgKo7rhvd+uQRARJoEQESaBEBEmgRA
      RJoEQESaBEBEmgRARJoEQESaBEBEmgRARJoEQESaBEBEWshvhGlmxgc49W4fLas3snpZFbOz
      DmZ+hHz1cpLVTrjVicjRWpPPF/4y/E0hXwE0I8NjbN9/AH9ilGw+x8zUBNfGPeoTskGGKD8h
      XwEUrW0tnHzzNeamDZrXNHL66FG6Hj2EZcgGGaJwruveOu5hCD0ATqKBrQ9tpefSENVWjF0H
      Hyc1OkC6sY7auCUbZIiCOI5z67iHIfQzMPAyXL06zNZtXcScgKYmi+XNq0jlK/vbXixNoQcg
      XtdM947m2xVYALU0xsKuqfQqvQsnZBi0IL7vl7oJkeR5XmhlSQBEpEkARKRJAESkSQBEpEkA
      RKRJAESkSQBEpEkARKRJAESkSQBEpEkARKRJAESkSQBEpEkARKRJAESkSQBEpEkARKRJAESk
      SQBExQnzXWwJgKg4ZbwynBCVRQIgIk0CICJNAiAiTQIgIk0CICIt9LVBp0f6OfluH2Z9G7u7
      ljGTjkNuANW4ipaaJbhAqKhooQdgJp1mY/c+Jgf7yQd50uPDuKbDphUOWusP/e5HP1cirfWS
      +HtUipvHOqxjHvoWSVVVNfT0nEbFG8D3uHD+PGt370GhCIKlt0GG53myP8ADlHcz4M3huTlQ
      hR/30K8As6kUNY2NzI3N4JotPLT3E+TSA4zP1tNcE5MNMsSiBbNjxE78PZ2D56B+DHvLUyiz
      sK23Qt8hpn1dF87oGPbK1dQnbHxHYS5bRy4ww61KRE7+/H8SvPsi1Wjct0Yx23ZgNm8oqMzQ
      v4INy6G1rf32ZwPAJBF2RaJsaa3BnSGYHkBVNaGqW1BKFV6ulwVu9P19F4LC5wRVdh9ElCWd
      nSb3ynfI97+BUdtG/LPfwWzZXHC5dtcX8IbfITtyidrupzCa1hZcpgRAhC4Yv0T+/dfmrwK5
      FPlL/xtKAFRdO/rRb3L53Bl27Xms4P4/yIMwUQQq0YBKNMx/MG2M+hXhlKsU2FXk7bpQTn6Q
      K0BBZI+wOzMaVxM//G2mz/wEo3kD1vrDoZUd9jGXABRAAnBnyjCxOh8ha63CNE2UHd4QSNjH
      XLpAItIkAKLiyDapItLCnHslARBF4/t+2U8UlACIogmCQAIgRDmTAIhIkwCISJMAiEiTAIhI
      kwCIogmCANd1S92Mu5IAiKKphHe+ZTLcAulsivyVtyHwMDsPYCQaS90kEQIJwAJo38M98QPc
      Ez8A7WNvfYbYo39a6maJEEgAFiKfwx84Dt4cAP7gCXRupsSNEmGQe4CFsGKYK/eBU4224pgr
      96JiNaVulQiBXAEWQJk2zs7nyNWsIjOTonbH51CWLPN4N9p3MbKTqHhtqZtyVxKABVKxGoIV
      B8hOT6Pi9aVuTlnTXgb3yD/R2PMSqqGToPVbGHVtpW7WHUkXSIQuGO3FPf0CVvoK5tXXyfe+
      VOomfSwJwH0o96m9ZcN0bncRlQFOVWnbcxcSgPsQ5u6ES5mRXI+z/ytkm3fgbXwKa8MTpW7S
      xwp9deihS2fpvToOqo6HD3SBa2HrFHNmHQ2JcNZyEeVNWQ72tmcYV+uJV9fRVBXuQ8Mw3wkO
      /SZ42eotNK/yOd97Ee3OMD1hMDk9wobN8uS0EFprCDxAgWGFstZmMSnDJDDjaBX+oshhdkVD
      Xx3aME2yU0PUNHeg8mlOvHmMLYcOEbMMfL+y9wfI5/Pk8/lbE7xuTvYq+vLoWhMMHic4+yLE
      6zG3fwnV2AmUdwh83yeTyYQ6Ie7meRNWmeEPg2qf4fFZ2te047suO/buY2rkOm5LPc6NvQEq
      dX8Ay7KwLAvHcQAwDOOB7A8QZCbJ/PJ7BEOnAIVhKJzHvh7a8oDFYprmh45XGGzbvnXcwxD6
      GRh4WRLJZcRsA0/HqW10aG4ymJjJsbxeFklfFN+DXOrGB43OTMESH5HSfh7/ylv4Q6cxV+7D
      7NiFMsLvToW/P4BTTVty/mfHqWU+qMuW5P4AD2rZD1WVxN75HO7x5/FUjMT2Z6HMv/0L5V87
      Sua/vg7ZKdS5fyfxhb/BXL4t9Hoqqw9SZh7UPYwyTOxtz+B37OfalQEaVu4t+5vgQgVTl8Gd
      n3CoM5MEqcGiBECeA1QIZZio6lbydi0qhM3hyp3ZsRujZTOBGcds68ZctqUo9cgVQJQlI7mO
      xJPf5dKpV1m363FUzbKi1CMBEGVJKQNV30GmcStG7fKi1bP0r6VC3IUEoMLIfKRwSQAqTNRm
      pIY57+dO5B6ggmitK2ZbJq01SudRgZ7/eZHDtsUOvASggmitK2L+lNaaYPwizb3/gvJm8Wt+
      H7Nj96JCUOwrgHSB7lOx/0GWBN/DPfE88csvExt8A/fNv4PsdKlbdUcSgPsUtT74ougAnU0B
      88dK59LooDxv3qULJMJnxXC6v0R6chC8OWp2/SaqTFfSkwCI0CmlMFftY3TnnxHkXRq6HinK
      TM4wSABEUShlkLdqCIygbE9+kHsAUWE8zwv1YaAEoIJU0nOAYtFayz7BpeJ5nowC3Yewj5UO
      8tiTvbTMnCFIDYRSvgSgwlTCg7Cbwn5m4l89Quy1P2f9wAtkX/4LdGai4DIlABVCB3lIXcPM
      jqN15YQgTPkrb8PcGEbg4Q+fJpi6WnCZMgpUAbTv4R77PsHJH7JJxcivqsJa/6lIvBn2QWb7
      TjynlsCdxUqux6hrL7jMaB3BCqUzE3g9P4HMJNbcMPnzP51fKWIJ0IGPzkyh3dl79umt1Qdx
      D36D3qbPY3/q26jqloLrlytABVBWHKO6BX/yfVAGqnY5FGHFtQdNBz5ez0/w3nkRVZUk9shX
      MZo3fuykOWXaeMt2M1DnsqNhdSgLA0gAKkGsjtihr5E58QLXUznW7P4tKOOHSwulZ8dwj/wj
      euoyAF5Vktjhb/DBFe9uzoC9ufiYUirUFTGkC1QBlFKYrV3oT3yN/uSvYNS2LY1lURTwwb/H
      Hf5OxX72IQEQJaOqW4jt+zL5lu2w5jB292/w0fVO7zSUenON2TBIF0iUjFIG1qbPkbbXUlVT
      S01yxV2vbFprlDdLwk/dGASIF9wGuQKIorrXwzBlmGi7Gm3G79mt01NXiL/xl+wZ+T76+D+g
      vUzB7Qs9AL6b4eyxNzly9hKum2Z6OsfM+CATc+EtkS2iyTv/U9TgMRLeBP7ZHxFM9BVcZuhd
      oJGBPuo6t7O5KUEuO0Fqco7U3CwbN5XnLoGieJRSi5qvo3VAMNFPMHKOxOwE6Efmy4s3zO85
      pgNwqsEqvAsUegBy6Wn6rx3jfaOR7m1JTv3yKF2PHsI21ZLYIMP3/Q9tkOF53gOboZnJZD60
      QUe5U0otaDOL/7fxyNRl8i9/Az1+gbVWA95QF7qtG732M+RH+5kZOEfTrmfwq9vwCzwWoQeg
      qiHJ+rYO3Gu9zKoYuw48yuTIMJnmehJ25W+QYZrmhzbIsG0b03wwY/KmaRIEQagbThTTQtv7
      0Y1HvOl+vImL4LvEg3HMsR6czofRdgup7t+l3zlHy8YDOPHCF90P/R6gpWMNM4M9ZBs6aE3U
      0NBUR9fGNmayS+PRvSg+o2ktRkMnWlm4dj2qdX5laKUUWplow77jM4PFCP0rWJkOm7sfvvXZ
      tgEaKXzWRrRprVF+DsefRfte2W+PVAijaQ3xJ77DeM8veHcox8Fl4e8LcNOCApBLjTHjKy6c
      OEnb7k/S2RArWoPEnemZ69hv/zVbB3txT0zj7Hzu9mbUS4xSBmZrF65by+T4kaLOe1pQF2ji
      vQEuHX2F4XgtA28PFK0x4uN5PT+FSy9TnbmCd/z5UIYAy53neeWxMlzLlg4m8k0c2NBO687i
      bFQg7k6ZFremCShj/s8Spr0MzmQvTd41yGfn/5vWuF5APnjA+wTPTeV5+MAj1CdccgM5oDq0
      BoiFsTY9SXa4l/RADy17n8VoXFPqJhWN9vO4p16g9ug/szvv4Z+pw9z925y8NMp/vHYO383Q
      uX6GtR2xgicF3jMA2ZlRfvbij0nVNdPSaLB802OsLKhKsRiqupnMzq9y3jhB+/YnUUZlDSHf
      F2+WfN8rqNw0NuD3vUJq3Rf5t5+f5eK1+feAXzrSx5d/rQnLLCwA97yOxqqSPP7Fz9BgV7Nr
      3x5aWqP77V/KB3dKKTAdtF29tE9+ACuOmVwPykRjYCTX4RsOrnt7PaCsm38wq0Iow8BPp2Ew
      h+fnGTg+WHCllaqUa/JoHaDyWYxg6S/NoqwYziN/RKb7Dzhbcxj2/CGNDQ089WgXq1prWdUc
      44mH12KZhd8HLeirpL5jOX7VaV79+Zvsf+KZgisV90frAL//DWJHn2d9DoKxdRjNG5bGSzEf
      w6huZqbzc1y8+jo7E0kMQ/H4jtWsTjpcuniBde31zGRcQFGTsBd9LBYUAKc+ydrurazYvAId
      W+KX3zKkM1Pk3voexvV3aEThnfxXYoe/uWR2iw+CYEHdS8NQ1CZsYpbiWO8gLx15H9Mw+PXH
      ttC9btmiQrCgs3m8t4dLr/eTXJtk8NQAyz+9dEcgypL2bw0Fgr4xD35pdYPup1uXcX3+540L
      XBiYAsCxTTatTJKI3f8XwoI6UVXNjbjWJL/42avUbI72pIZS3AeoRBJnz+8QNG5gpm4z9o4v
      gVEZ3/7FmLmqlML+wOiPXcC9wIKuAFZtkl/9vWeZnhjFiS/tBzD3UoqRIGUYWJu/QCaxgfcu
      XGJ5+84l3f+/6eOuCo4JTx3cROu5IdKpaZ7+ZBdxZ3Fd8wWdzX4mzXsX3uP8O+8wms4tqiJR
      GGUY6HgDvlVVMSf/QpcwudNV1fcDLgylOT9u0nt1guAjT3+3rWnhj5/Zy5M7W9jc2bzoY7Kg
      AGjtMjUxQ6K+DseojIMvSm+h70ncKQAnLwzzw1f6eHfU5G9/dIzeq+N3/H8L3StgYf0ZZZBJ
      TTLnBhhLfA5KOau0vQEKmch2pu/6jWFOmExnOH9l7FaZth3e/c89Ok6awXcv07Cpg88//TSW
      JSd/KQVB8MDePislrTUJx0Yp0BpijkV7c21R6vo/pRIZeZFIZ9QAAAAASUVORK5CYII=
    </thumbnail>
    <thumbnail height='192' name='Tweets per Week' width='192'>
      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
      iVUcTB8AAAAASUVORK5CYII=
    </thumbnail>
  </thumbnails>
</workbook>
